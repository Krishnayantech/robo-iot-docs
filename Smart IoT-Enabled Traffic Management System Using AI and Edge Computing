# **Smart IoT-Enabled Traffic Management System Using AI and Edge Computing**

## **Overview**
Traffic congestion in urban areas leads to increased pollution, fuel consumption, and travel delays. This project presents a **Smart IoT-Enabled Traffic Management System** that leverages **AI-driven analytics, edge computing, and real-time IoT data** to dynamically optimize traffic flow. The system automatically adjusts traffic signals, prioritizes emergency vehicles, and provides real-time congestion monitoring through a cloud dashboard.

## **Key Features**
- **AI-Based Traffic Monitoring** – Detects and analyzes vehicle density at intersections.
- **Dynamic Traffic Signal Control** – Adjusts green/red light durations based on real-time traffic conditions.
- **Emergency Vehicle Prioritization** – Detects ambulances and police vehicles, ensuring they receive priority passage.
- **Edge Computing for Rapid Decision-Making** – Processes traffic data locally to reduce latency.
- **Cloud-Based Analytics Dashboard** – Provides city planners with live traffic insights.

---

## **1. AI-Powered Traffic Density Detection**
The system utilizes **computer vision** to analyze live video footage and estimate vehicle density at intersections.

### **Sample Code: AI-Based Traffic Density Detection (Python & OpenCV)**
```python
import cv2
import numpy as np

# Load pre-trained vehicle detection model
car_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_car.xml')

cap = cv2.VideoCapture(0)  # Traffic camera feed
while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    cars = car_cascade.detectMultiScale(gray, 1.1, 3)

    for (x, y, w, h) in cars:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    vehicle_count = len(cars)
    cv2.putText(frame, f"Vehicles: {vehicle_count}", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    cv2.imshow("Traffic Density", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
```

---

## **2. IoT-Enabled Dynamic Traffic Signal Control**
Based on real-time traffic density, the system dynamically adjusts traffic light durations using an ESP32 microcontroller.

### **Sample Code: Dynamic Traffic Signal Control (ESP32 - Arduino)**
```cpp
#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid = "Your_WiFi";
const char* password = "Your_Password";
const char* serverURL = "http://your-cloud-dashboard.com/update_signal";

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) delay(500);
}

void loop() {
  int traffic_density = random(1, 100); // Simulated vehicle count
  int green_light_time = traffic_density > 50 ? 10 : 20; // Adjust signal timing

  HTTPClient http;
  http.begin(serverURL);
  http.addHeader("Content-Type", "application/json");

  String payload = "{\"green_light_time\": " + String(green_light_time) + "}";
  int responseCode = http.POST(payload);

  Serial.println(responseCode > 0 ? "Traffic signal updated!" : "Failed to update signal.");
  http.end();

  delay(5000);
}
```

---

## **3. Emergency Vehicle Detection & Priority Passage**
Using **YOLO (You Only Look Once)** object detection, the system identifies emergency vehicles and adjusts signals accordingly.

### **Sample Code: Emergency Vehicle Detection (Python & YOLOv5)**
```python
import torch
from PIL import Image
import cv2

# Load YOLO model
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')

cap = cv2.VideoCapture(0)  # Camera feed
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    img = Image.fromarray(frame)
    results = model(img)

    detected_classes = results.pandas().xyxy[0]['name'].tolist()
    if "ambulance" in detected_classes or "police car" in detected_classes:
        print("Emergency vehicle detected! Granting priority passage.")

    cv2.imshow("Emergency Detection", np.squeeze(results.render()))
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
```

---

## **4. Cloud-Based Traffic Monitoring Dashboard**
Collected data is visualized on a dashboard, providing insights for city planners.

### **Dashboard Features:**
- **Live traffic camera feeds**
- **Real-time congestion heatmaps**
- **Emergency vehicle alerts**
- **Traffic signal optimization reports**

---

## **Hardware Requirements**
- **Microcontroller**: ESP32 / Raspberry Pi 4
- **Camera Module**: Raspberry Pi Camera / USB Camera
- **Traffic Signal Control Relay**: 5V Relay Module
- **Wireless Communication**: LoRaWAN / Wi-Fi
- **Edge Computing Device**: NVIDIA Jetson Nano for AI processing

---

## **Future Enhancements**
- **Vehicle-to-Infrastructure (V2I) Communication** – Enable smart vehicles to interact with traffic signals.
- **Predictive Traffic Flow AI** – Analyze historical data to forecast congestion.
- **Mobile App for Drivers** – Provide real-time optimized route suggestions.

---

## **Conclusion**
This **Smart IoT-Enabled Traffic Management System** integrates **AI, IoT, and edge computing** to improve urban mobility. By dynamically managing traffic signals, prioritizing emergency vehicles, and delivering real-time analytics, this system can reduce congestion and improve road safety.


---

## **License**
This project is licensed under the MIT License - see the LICENSE file for details.

---

## **GitHub Badges**
![GitHub last commit](https://img.shields.io/github/last-commit/user/repository)
![GitHub issues](https://img.shields.io/github/issues/user/repository)
![GitHub license](https://img.shields.io/github/license/user/repository)

---

## **Flowchart (System Workflow)**
```mermaid
graph TD;
  A[Traffic Camera & Sensors] -->|Collect Data| B[AI-Based Vehicle Detection]
  B -->|Estimates Traffic Density| C[Updates Traffic Signal Timing]
  C -->|Adjusts Green/Red Lights| D[Optimized Traffic Flow]
  B -->|Detects Emergency Vehicles| E[Grants Priority Passage]
  A -->|Data Sent to Cloud| F[Dashboard for City Planners]
```


